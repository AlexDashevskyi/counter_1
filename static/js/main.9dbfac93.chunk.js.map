{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","value_1","setValue_1","value_10","setValue_10","valueRandom","setValueRandom","className","onClick","Math","floor","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAuDeA,MApDf,WAAgB,IAAD,EACiBC,mBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,OAEmBF,mBAAS,GAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGyBJ,mBAAS,GAHlC,mBAGNK,EAHM,KAGOC,EAHP,KA2Bb,OACI,yBAAKC,UAAW,OACd,4BAAQA,UAAW,eAAnB,YACA,yBAAKA,UAAW,eACd,4BAAQC,QA3BF,WACZN,EAAWD,EAAU,IA0BSM,UAAW,OAAnC,MACCN,EACD,4BAAQO,QApBA,WACdN,EAAWD,EAAU,IAmBWM,UAAW,OAArC,OAEF,yBAAKA,UAAW,eACd,4BAAQC,QA7BD,WACbJ,EAAYD,EAAW,KA4BQI,UAAW,OAApC,OACCJ,EACD,4BAAQK,QAtBC,WACfJ,EAAYD,EAAW,KAqBUI,UAAW,OAAtC,QAEF,yBAAKA,UAAW,eACd,4BAAQC,QA/BE,WAChBF,EAAeD,EAAcI,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,KA8B7BJ,UAAW,OAAvC,SACCF,EACD,4BAAQG,QAxBI,WAClBF,EAAeD,EAAcI,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,KAuB3BJ,UAAW,OAAzC,UAEF,yBAAKA,UAAW,eACd,4BAAQC,QAxBF,WACZN,EAAWD,EAAUA,GACrBG,EAAYD,EAAWA,GACvBG,EAAeD,EAAcA,IAqBCE,UAAW,OAAnC,YCrCUK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9dbfac93.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css'\n\nfunction App() {\n  const [value_1, setValue_1] = useState(0);\n  const [value_10, setValue_10] = useState(0);\n  const [valueRandom, setValueRandom] = useState(0)\n  const add_1 = () => {\n    setValue_1(value_1 + 1);\n  }\n  const add_10 = () => {\n    setValue_10(value_10 + 10);\n  };\n  const addRandom = () => {\n    setValueRandom(valueRandom + Math.floor((Math.random() * 10) + 1));\n  };\n  const minus_1 = () => {\n    setValue_1(value_1 - 1);\n  };\n  const minus_10 = () => {\n    setValue_10(value_10 - 10);\n  };\n  const minusRandom = () => {\n    setValueRandom(valueRandom - Math.floor((Math.random() * 10) + 1));\n  };\n  const reset = () => {\n    setValue_1(value_1 - value_1);\n    setValue_10(value_10 - value_10);\n    setValueRandom(valueRandom - valueRandom);\n  };\n  return (\n      <div className={'App'}>\n        <header className={'App-value_1'}>COUNTERS</header>\n        <div className={'App-value_1'}>\n          <button onClick={add_1} className={'btn'}>+1</button>\n          {value_1}\n          <button onClick={minus_1} className={'btn'}>-1</button>\n        </div>\n        <div className={'App-value_2'}>\n          <button onClick={add_10} className={'btn'}>+10</button>\n          {value_10}\n          <button onClick={minus_10} className={'btn'}>-10</button>\n        </div>\n        <div className={'App-value_3'}>\n          <button onClick={addRandom} className={'btn'}>+Rand</button>\n          {valueRandom}\n          <button onClick={minusRandom} className={'btn'}>-Rand</button>\n        </div>\n        <div className={'App-value_4'}>\n          <button onClick={reset} className={'btn'}>Reset</button>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}